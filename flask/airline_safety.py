# -*- coding: utf-8 -*-
"""airline_safety.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_E8OJVysrWL0YPVoDpE64oqKUic9NQ56
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import joblib

# Load the data
df = pd.read_csv('airline-safety.csv')

# Feature engineering
df['incident_rate_85_99'] = df['incidents_85_99'] / df['avail_seat_km_per_week'] * 1e9
df['incident_rate_00_14'] = df['incidents_00_14'] / df['avail_seat_km_per_week'] * 1e9

# Create a safety label (for classification)
# 1 means the airline had fewer incidents in 2000-2014 compared to 1985-1999
df['safety_improved'] = (df['incident_rate_00_14'] < df['incident_rate_85_99']).astype(int)

# Select features
X = df[['incident_rate_85_99', 'fatal_accidents_85_99', 'fatalities_85_99',
        'avail_seat_km_per_week']]
y = df['safety_improved']

# Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate
accuracy = model.score(X_test, y_test)
print(f"Model accuracy: {accuracy:.2f}")

# Save model
joblib.dump(model, 'airline_safety_model.pkl')

from flask import Flask, request, jsonify, render_template
import joblib
import numpy as np
import pandas as pd

app = Flask(__name__)
model = joblib.load('airline_safety_model.pkl')

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    # Get input values from form
    incident_rate = float(request.form['incident_rate'])
    fatal_accidents = int(request.form['fatal_accidents'])
    fatalities = int(request.form['fatalities'])
    avail_seat_km = float(request.form['avail_seat_km'])

    # Make prediction
    input_data = [[incident_rate, fatal_accidents, fatalities, avail_seat_km]]
    prediction = model.predict(input_data)

    # Interpret result
    result = "Safety is likely to improve" if prediction[0] == 1 else "Safety is not likely to improve"

    return render_template('index.html', prediction_text=result)

if __name__ == '__main__':
    app.run(debug=True)